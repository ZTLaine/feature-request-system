name: Deploy to AWS ECS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: feature-request-system
  ECS_CLUSTER: feature-request-system-cluster
  ECS_SERVICE: feature-request-system-service
  ECS_TASK_FAMILY: feature-request-system-task
  SECRET_NAME: NEXTAUTH_SECRET

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Generate Prisma Client
        run: |
          npm ci
          npx prisma generate
      
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          # Save the image URI for the next step
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      
      - name: Download current task definition
        id: get-task-def
        run: |
          # We'll always try to download the existing task definition
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_FAMILY }} \
          --query 'taskDefinition' > task-definition.json
          
          # Make sure the file exists even if the previous command failed
          if [ ! -f "task-definition.json" ]; then
            echo "Error: Could not retrieve existing task definition. Ensure it exists in ECS."
            exit 1
          fi
      
      - name: Get Secret ARN
        id: get-secret
        run: |
          # Get the ARN of the secret
          SECRET_ARN=$(aws secretsmanager describe-secret --secret-id ${{ env.SECRET_NAME }} --query 'ARN' --output text) || true
          
          if [ -z "$SECRET_ARN" ]; then
            echo "Warning: Could not find secret with name ${{ env.SECRET_NAME }}. Make sure it exists."
            exit 1
          fi
          
          echo "arn=$SECRET_ARN" >> $GITHUB_OUTPUT
      
      - name: Update task definition with secrets
        run: |
          # Create a temporary file for the updated task definition
          SECRET_ARN="${{ steps.get-secret.outputs.arn }}"
          
          # First, remove any existing environment variable with the same name
          # This prevents the conflict between env vars and secrets
          if jq -e '.containerDefinitions[0].environment' task-definition.json > /dev/null; then
            echo "Checking for existing environment variable..."
            jq '.containerDefinitions[0].environment = [.containerDefinitions[0].environment[] | select(.name != "NEXTAUTH_SECRET")]' task-definition.json > task-definition-updated.json
            mv task-definition-updated.json task-definition.json
          fi
          
          # Now check if secrets configuration already exists
          if jq -e '.containerDefinitions[0].secrets' task-definition.json > /dev/null; then
            echo "Secret configuration already exists. Making sure NEXTAUTH_SECRET is included..."
            
            # Check if NEXTAUTH_SECRET is already configured
            if ! jq -e '.containerDefinitions[0].secrets[] | select(.name == "NEXTAUTH_SECRET")' task-definition.json > /dev/null; then
              echo "Adding NEXTAUTH_SECRET to existing secrets configuration..."
              jq --arg ARN "$SECRET_ARN" '.containerDefinitions[0].secrets += [{"name": "NEXTAUTH_SECRET", "valueFrom": $ARN}]' task-definition.json > task-definition-updated.json
              mv task-definition-updated.json task-definition.json
            else
              echo "NEXTAUTH_SECRET already exists in the task definition."
            fi
          else
            echo "No secrets configuration found. Creating one with NEXTAUTH_SECRET..."
            jq --arg ARN "$SECRET_ARN" '.containerDefinitions[0].secrets = [{"name": "NEXTAUTH_SECRET", "valueFrom": $ARN}]' task-definition.json > task-definition-updated.json
            mv task-definition-updated.json task-definition.json
          fi
      
      - name: Update ECS task definition with new image
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: feature-request-system-container
          image: ${{ steps.build-image.outputs.image }}
      
      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true 