name: Deploy to AWS ECS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: feature-request-system
  ECS_CLUSTER: feature-request-system-cluster
  ECS_SERVICE: feature-request-system-service
  ECS_TASK_FAMILY: feature-request-system-task

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Generate Prisma Client
        run: |
          npm ci
          npx prisma generate
      
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          # Save the image URI for the next step
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      
      - name: Download current task definition
        id: get-task-def
        continue-on-error: true
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_FAMILY }} \
          --query 'taskDefinition' > task-definition.json
          echo "exists=true" >> $GITHUB_OUTPUT
      
      - name: Create new task definition if none exists
        if: steps.get-task-def.outputs.exists != 'true'
        run: |
          echo "Creating new task definition..."
          EXECUTION_ROLE_ARN=$(aws iam list-roles --query "Roles[?RoleName=='ecsTaskExecutionRole'].Arn" --output text)
          if [ -z "$EXECUTION_ROLE_ARN" ]; then
            echo "Error: ecsTaskExecutionRole not found. Check your IAM roles."
            exit 1
          fi
          
          SECRET_ARN=$(aws secretsmanager list-secrets --query "SecretList[?contains(Name, 'feature-request')].ARN" --output text)
          if [ -z "$SECRET_ARN" ]; then
            echo "Warning: No secrets found matching 'feature-request'. Task will be created without secrets."
          fi
          
          ECR_REPOSITORY_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}"
          
          cat > task-definition.json << EOF
          {
            "family": "${{ env.ECS_TASK_FAMILY }}",
            "networkMode": "awsvpc",
            "executionRoleArn": "$EXECUTION_ROLE_ARN",
            "taskRoleArn": "$EXECUTION_ROLE_ARN",
            "containerDefinitions": [
              {
                "name": "feature-request-container",
                "image": "${{ steps.build-image.outputs.image }}",
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 3000,
                    "hostPort": 3000,
                    "protocol": "tcp"
                  }
                ],
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/feature-request-logs",
                    "awslogs-region": "${{ env.AWS_REGION }}",
                    "awslogs-stream-prefix": "ecs"
                  }
                }
              }
            ],
            "requiresCompatibilities": [
              "FARGATE"
            ],
            "cpu": "256",
            "memory": "512"
          }
          EOF
          
          if [ ! -z "$SECRET_ARN" ]; then
            # Add secrets to the task definition
            TMP_FILE=$(mktemp)
            jq ".containerDefinitions[0].secrets = [
              {
                \"name\": \"DATABASE_URL\",
                \"valueFrom\": \"$SECRET_ARN:DATABASE_URL::\"
              },
              {
                \"name\": \"NEXTAUTH_SECRET\",
                \"valueFrom\": \"$SECRET_ARN:NEXTAUTH_SECRET::\"
              },
              {
                \"name\": \"NEXTAUTH_URL\",
                \"valueFrom\": \"$SECRET_ARN:NEXTAUTH_URL::\"
              },
              {
                \"name\": \"GOOGLE_CLIENT_ID\",
                \"valueFrom\": \"$SECRET_ARN:GOOGLE_CLIENT_ID::\"
              },
              {
                \"name\": \"GOOGLE_CLIENT_SECRET\",
                \"valueFrom\": \"$SECRET_ARN:GOOGLE_CLIENT_SECRET::\"
              }
            ]" task-definition.json > "$TMP_FILE"
            mv "$TMP_FILE" task-definition.json
          fi
          
          # Create Cloudwatch logs group if it doesn't exist
          aws logs create-log-group --log-group-name /ecs/feature-request-logs || echo "Log group already exists"
      
      - name: Update ECS task definition with new image
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: feature-request-system-container
          image: ${{ steps.build-image.outputs.image }}
      
      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true 