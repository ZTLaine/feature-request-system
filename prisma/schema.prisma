generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Feature {
  id           String         @id
  title        String         @db.VarChar(100)
  description  String         @db.VarChar(500)
  status       Feature_status @default(PENDING)
  creatorId    String
  isDeleted    Boolean        @default(false)
  deletedAt    DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  creator      User           @relation(fields: [creatorId], references: [id])
  statusChanges StatusChange[]
  votes        Vote[]

  @@index([creatorId], map: "Feature_creatorId_fkey")
}

model StatusChange {
  id        String                 @id
  featureId String
  oldStatus StatusChange_oldStatus
  newStatus StatusChange_newStatus
  createdAt DateTime               @default(now())
  Feature   Feature                @relation(fields: [featureId], references: [id])

  @@index([featureId], map: "StatusChange_featureId_fkey")
}

model User {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          User_role @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  Account       Account[]
  Feature       Feature[]
  Vote          Vote[]
}

model Vote {
  id        String   @id
  userId    String
  featureId String
  createdAt DateTime @default(now())
  Feature   Feature  @relation(fields: [featureId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@unique([userId, featureId])
  @@index([featureId], map: "Vote_featureId_fkey")
}

enum StatusChange_oldStatus {
  PENDING
  PLANNED
  IN_PROGRESS
  COMPLETED
  DENIED
}

enum StatusChange_newStatus {
  PENDING
  PLANNED
  IN_PROGRESS
  COMPLETED
  DENIED
}

enum Feature_status {
  PENDING
  PLANNED
  IN_PROGRESS
  COMPLETED
  DENIED
}

enum User_role {
  USER
  ADMIN
}
