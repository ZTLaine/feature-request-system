generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?    @map("expires_at")
  token_type        String? @map("token_type")
  scope             String?
  id_token          String? @db.Text @map("id_token")
  session_state     String? @map("session_state")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("account")
}

model Feature {
  id            String         @id
  title         String         @db.VarChar(100)
  description   String         @db.VarChar(500)
  status        Feature_status @default(PENDING)
  creatorId     String         @map("creator_id")
  isDeleted     Boolean        @default(false) @map("is_deleted")
  deletedAt     DateTime?      @map("deleted_at")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @map("updated_at")
  creator       User           @relation(fields: [creatorId], references: [id])
  statusChanges StatusChange[] @relation("FeatureToStatusChange")
  votes         Vote[]         @relation("FeatureToVote")

  @@index([creatorId], map: "feature_creator_id_fkey")
  @@map("feature")
}

model StatusChange {
  id        String                 @id
  featureId String                 @map("feature_id")
  oldStatus StatusChange_oldStatus @map("old_status")
  newStatus StatusChange_newStatus @map("new_status")
  createdAt DateTime               @default(now()) @map("created_at")
  feature   Feature                @relation("FeatureToStatusChange", fields: [featureId], references: [id])

  @@index([featureId], map: "status_change_feature_id_fkey")
  @@map("status_change")
}

model User {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          User_role @default(USER)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @map("updated_at")
  accounts      Account[]
  features      Feature[]
  votes         Vote[]    @relation("UserToVote")

  @@map("user")
}

model Vote {
  id        String   @id
  userId    String   @map("user_id")
  featureId String   @map("feature_id")
  createdAt DateTime @default(now()) @map("created_at")
  feature   Feature  @relation("FeatureToVote", fields: [featureId], references: [id])
  user      User     @relation("UserToVote", fields: [userId], references: [id])

  @@unique([userId, featureId])
  @@index([featureId], map: "vote_feature_id_fkey")
  @@map("vote")
}

enum StatusChange_oldStatus {
  PENDING
  PLANNED
  IN_PROGRESS
  COMPLETED
  DENIED
}

enum StatusChange_newStatus {
  PENDING
  PLANNED
  IN_PROGRESS
  COMPLETED
  DENIED
}

enum Feature_status {
  PENDING
  PLANNED
  IN_PROGRESS
  COMPLETED
  DENIED
}

enum User_role {
  USER
  ADMIN
}
